import groovy.json.JsonOutput

plugins {
    id 'java'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

version = "${minecraft_version}_v${mod_version}"
group = "me.srrapero720"
archivesBaseName = String.valueOf(mod_id)

java {
    targetCompatibility = sourceCompatibility = JavaVersion.VERSION_17
}

minecraft {
    mappings channel: 'parchment', version: "${mappings_version}-${minecraft_version}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=' + String.valueOf(mod_id) + '.mixins.json'
            //jvmArgs '-XX:+UnlockCommercialFeatures' // uncomment for profiling
            property 'forge.logging.console.level', 'info'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            arg '-mixin.config=' + String.valueOf(mod_id) + '.mixins.json'
            property 'forge.logging.console.level', 'info'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--mod', String.valueOf(mod_id), '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources')
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

compileJava {
    options.compilerArgs = ["-Xdiags:verbose"]
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
}

repositories {
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name = "tterrag maven"
        url = "https://maven.tterrag.com/"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation fg.deobf("curse.maven:embeddium-908741:4819807")
    //runtimeOnly fg.deobf("curse.maven:oculus-581495:3770744")
    runtimeOnly fg.deobf("curse.maven:create-328085:4625534")
    //runtimeOnly fg.deobf("curse.maven:flywheel-486392:3737402")
    //implementation fg.deobf("curse.maven:jei-238222:3758750")
}

jar {
    manifest {
        attributes([
                "Specification-Title": "${modid}",
                "Specification-Vendor": "${modauthor}",
                "Specification-Version": "${modversion}",
                "Implementation-Title": "${modname}",
                "Implementation-Version": "${modversion}",
                "Implementation-Vendor" : "${modauthor}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "${modid}.mixins.json"
        ])
    }
}

// Process target resources with mod info
processResources {
    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        def combinedMap = [:]
        combinedMap.putAll(rootProject.properties)
        combinedMap.putAll([
                modauthorlist: JsonOutput.toJson(modauthor.trim().replaceAll(" ", "").split(","))
        ])

        expand(combinedMap)
    }
}

jar.finalizedBy('reobfJar')

tasks.processResources.outputs.upToDateWhen { false }
tasks.register('sourcesJar', Jar) {
    from sourceSets.main.allSource
    archiveBaseName.set(project.archivesBaseName)
    archiveVersion.set("${project.version}")
    archiveClassifier.set('sources')
}

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

artifacts {
    archives jar, sourcesJar, javadocJar
}